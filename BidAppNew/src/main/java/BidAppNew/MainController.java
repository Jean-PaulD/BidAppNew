package BidAppNew;

import BidAppNew.domain.User;
import BidAppNew.factories.UserFactory;
import BidAppNew.repositories.UserRepository;
import BidAppNew.services.UserService;
import BidAppNew.services.impl.UserServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    private UserServiceImpl userServiceImpl;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser (@RequestParam String userName, @RequestParam String firstName, @RequestParam String lastname,
                       @RequestParam String password, @RequestParam int reportCounter, @RequestParam String userType) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        //Country country = CountryFactory.buildCountry(countryName);
        //countryService.save(country);
        //return new Gson().toJson(country);

        User user = UserFactory.getUser(userName, firstName, lastname, password, reportCounter, userType);
        User user2 = UserFactory.getUser("Username1", "Jean", "Paul", "1234",
                4, "admin");

//        localhost:8080/demo/add?userName=Jeff1&firstName=Jeff1&lastname=Paul1&password=1234&reportCounter=3&userType=admin1
//        localhost:8080/demo/add?userName=Jeff2&firstName=Jeff2&lastname=Paul1&password=1234&reportCounter=3&userType=admin1
//        localhost:8080/demo/add?userName=Jeff3&firstName=Jeff3&lastname=Paul1&password=1234&reportCounter=3&userType=admin1
//        localhost:8080/demo/add?userName=Jeff4&firstName=Jeff4&lastname=Paul1&password=1234&reportCounter=3&userType=admin1
//        localhost:8080/demo/add?userName=JP1&firstName=Jean1&lastname=Paul1&password=1234&reportCounter=3&userType=admin1
//        localhost:8080/demo/add?userName=JP2&firstName=Jean2&lastname=Paul2&password=1234&reportCounter=3&userType=admin2
//        localhost:8080/demo/add?userName=JP3&firstName=Jean3&lastname=Paul3&password=1234&reportCounter=3&userType=admin3
//        localhost:8080/demo/add?userName=JP4&firstName=Jean4&lastname=Paul4&password=1234&reportCounter=3&userType=admin4

        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users

        //return userRepository.findAll();
        return userRepository.findAll();
        //return userServiceImpl.findbyUserName("username99");
    }



    @GetMapping(path="/username")
    public @ResponseBody String getUserName() {
        // This returns a JSON or XML with the users

        //return userRepository.findAll();
        //return userRepository.findAll();
        //return userServiceImpl.findbyUserName("username99");
        List<User> findUserName = userRepository.findByusername("JP1");//serName("JP1");
        //Users findByLastName1 = userRepository.findByUserName("JP1");

        return findUserName.toString();

    }



}
